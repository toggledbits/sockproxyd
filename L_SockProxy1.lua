-- L_SockProxy1.lua, (C) 2020 Patrick H. Rigney, All Rights Reserved

local PLUGIN_NAME =		"SockProxy1"
local PLUGIN_ID = 		9302
local PLUGIN_VERSION =	"1.0-20225"

local _CONFIGVERSION = 20140

local isOpenLuup = luup.openLuup ~= nil
local pluginDevice

lfs = require "lfs"

local MYSID = "urn:toggledbits-com:serviceId:SockProxy1"

local function file_mod( fn )
	return lfs.attributes( fn, "modification" ) or 0
end

local function getInstallPath()
	if not installPath then
		installPath = "/etc/cmh-ludl/" -- until we know otherwise
		if isOpenLuup then
			local loader = require "openLuup.loader"
			if loader.find_file then
				installPath = loader.find_file( "L_SockProxy1.lua" ):gsub( "L_SockProxy1.lua$", "" )
			else
				installPath = "./" -- punt
			end
		end
	end
	return installPath
end

local function getVar( var, dflt )
	local s = luup.variable_get( MYSID, var, pluginDevice ) or dflt
	if "" == s then return dflt end
	return s
end

local function setVar( var, val )
	val = tostring( val or "" )
	local s = getVar( var, nil ) -- default nil
	if val ~= s then
		luup.variable_set( MYSID, var, val, pluginDevice )
	end
	return s -- return old value
end

function reboot()
	os.execute( "sync && sync" )
	os.execute( "/sbin/reboot" )
end

function proxy_check()
	luup.call_delay( 'proxy_check', 300 ) -- immediately schedule next check
	local socket = require "socket"
	local sock = socket.tcp()
	sock:settimeout( 10 )
	if not sock:connect( "127.0.0.1", 2504 ) then
		setVar( "Status", 0 )
		setVar( "Message", "Down; can't connect" )
	else
		local ans,err = sock:receive("*l")
		if not ans then
			luup.log("SockProxy1: health-check of proxy failed! "..tostring(err), 1)
			setVar( "Status", 0 )
			setVar( "Message", "Down; missed greeting" )
		else
			local ver = ans:match("^OK TOGGLEDBITS%-SOCKPROXY (%d+)")
			if ver then
				if setVar( "Status", 1 ) ~= "1" then
					luup.log("SockProxy1: Proxy is healthy!")
				end
				setVar( "Version", ver )
				setVar( "Message", "Up; healthy" )
			else
				luup.log("SockProxy1: invalid response from proxy: "..tostring(ans), 1)
				setVar( "Status", 0 )
				setVar( "Message", "Down; invalid greeting" )
			end
		end
		sock:shutdown("both")
	end
	sock:close()
end

local function check_plugin_install( pdev )
	local ipath = getInstallPath()
	local restart = false
	luup.log("SockProxy1: Checking installation for "..pdev.."; install path is "..ipath)

	local lastversion = tonumber( ( luup.variable_get( MYSID, "ConfigVersion", pdev ) ) ) or 0

	if file_mod( "/www/cmh/skins/default/icons/SockProxy1.png" ) == 0 then
		os.execute( "mkdir -p /www/cmh/skins/default/icons/" )
		os.execute( "ln -sf '" .. ipath .. "SockProxy1.png' /www/cmh/skins/default/icons/" )
	end

	-- Check the proxy daemon executable itself
	local pkg = ipath.."sockproxyd.lua.lzo"
	if file_mod( pkg ) == 0 then return false, "Invalid install (2)", PLUGIN_NAME end
	local script = ipath .. "sockproxyd.lua"
	if lastversion < _CONFIGVERSION then
		luup.log("SockProxy1: updating proxy daemon executable", 2)
		if os.execute( "pluto-lzo d '" .. pkg .. "' '" .. script .. "'" ) == 0 then
			os.execute( "/etc/init.d/sockproxyd stop" )
			restart = true
		else
			luup.log("SockProxy1: An error occurred while attempting to uncompress the daemon executable. Please do it manually. The daemon has not been updated.",1)
			return false, "Setup failure 1", PLUGIN_NAME
		end
	end

	-- Check the init script
	local inits = "/etc/init.d/sockproxyd"
	if lastversion < _CONFIGVERSION then
		if file_mod( inits ) > 0 then
			os.execute( inits .. " disable" )
			os.execute( inits .. " stop" )
		end
		luup.log("SockProxy1: Writing init script "..inits)
		local f,err = io.open( inits, "w" )
		if not f then
			luup.log("SockProxy1:startup() can't write "..inits..": "..tostring(err),1)
			return false, "Setup failure 2", PLUGIN_NAME
		end
		local usesProcd = file_mod( "/sbin/procd" ) > 0
		if usesProcd then
			f:write((([[#!/bin/sh /etc/rc.common
# (C) 2020 Patrick H. Rigney, All Rights Reserved; part of SockProxy
# init script for Vera systems using procd
# https://github.com/toggledbits/sockproxyd

START=80
STOP=80

# THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT

USE_PROCD=1
PROG=###sockproxyd.lua
LOGFILE=/tmp/sockproxyd.log
PIDFILE=/var/run/sockproxyd.pid

start_service () {
	procd_open_instance
	procd_set_param command lua "$PROG" -L "$LOGFILE"
	procd_set_param pidfile $PIDFILE
	procd_set_param limits core="unlimited"
	procd_set_param respawn 3600 90 10
	procd_close_instance
}
]]):gsub( "%#%#%#", ipath )) )
		else
f:write((([[#!/bin/sh /etc/rc.common
# (C) 2020 Patrick H. Rigney, All Rights Reserved; part of SockProxy
# Generic init script for older Vera systems (no procd)
# https://github.com/toggledbits/sockproxyd

START=80
STOP=80

# THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT

PROG=###sockproxyd.lua
LOGFILE=/tmp/sockproxyd.log
PIDFILE=/var/run/sockproxyd.pid

get_pid() {
	PID=`ps | grep 'sockproxyd' | awk '/lua/ { print $1; }'`
}

start() {
	get_pid
	if [ "x$PID" != "x" ]; then
		echo "Already running!"
		exit 2
	fi
	lua "$PROG" -L "$LOGFILE" &
	sleep 5
	get_pid
	if [ "x$PID" == "x" ]; then
		echo "Failed to start!"
		exit 1
	else
		echo $PID >$PIDFILE
		echo "Started $PID"
	fi
}

stop() {
	get_pid
	if [ "x$PID" != "x" ]; then
		echo "Stopping $PID"
		kill $PID
	fi
	rm -f $PIDFILE
}

restart() {
	get_pid
	if [ "x$PID" != "x" ]; then
		stop
		sleep 5
	fi
	start
}
]]):gsub( "%#%#%#", ipath )) )
		end
		f:write("\n# script written "..os.date("%x.%X").." version ".._CONFIGVERSION.."\n")
		f:close()
		os.execute( "rm -f /etc/rc.d/S*sockproxyd /etc/rc.d/K*sockproxyd" )
		os.execute( "chmod 755 " .. inits )
		os.execute( inits .. " enable" )
		restart = true
	end

	luup.variable_set( MYSID, "ConfigVersion", _CONFIGVERSION, pdev )

	if restart then
		setVar( "Message", "Waiting for system reboot to complete install" )
		luup.call_delay( "reboot", 60, "" )
		luup.log("SockProxy1: System reboot scheduled for 60 seconds!", 2)
		return false, "Reboot! Please Wait!", PLUGIN_NAME
	end
	luup.log("SockProxy1: Install OK")
end

function startup( pdev )
	pluginDevice = pdev
	luup.log(string.format("Starting %s ver %s", PLUGIN_NAME, PLUGIN_VERSION))
	setVar("Status", 0)

	if not isOpenLuup then
		setVar("Message", "Checking configuration...")
		local st,msg,nm = check_plugin_install( pdev )
		if st == false then
			return st,msg,nm
		end
	end

	setVar("Message", "Pausing for first health check...")
	luup.log("SockProxy1: First proxy health check will occur shortly.")
	luup.call_delay( 'proxy_check', 15 )
	luup.set_failure( 0, pdev )
	return true, "", PLUGIN_NAME
end
